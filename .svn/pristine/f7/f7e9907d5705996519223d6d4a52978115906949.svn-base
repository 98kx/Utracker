package com.utracker;

import android.content.Context;
import android.content.IntentFilter;
import android.content.SharedPreferences;
import android.preference.PreferenceManager;
import android.util.Log;
import android.widget.Toast;
import android.app.Application;

import com.baidu.location.BDLocation;
import com.baidu.location.BDLocationListener;
import com.baidu.location.LocationClient;
import com.baidu.location.LocationClientOption;
import com.baidu.location.BDNotifyListener;

public class LocationApplication extends Application{
	private static LocationApplication mInstance = null;
	private String TAG = "LocationApplication";
	
	private LocationClient bLocationClient = null;	
	private BDLocation lastLocation = null;
	private String lastAddress = "";	
	
	public MainActivity main = null;	
	
	public static int counter = 0;
	public void onCreate() {
		super.onCreate();
		mInstance = this;
		/**
		 * Settings are loaded from preference files.
		 */
		try {
			Setting.refreshSettingsFromPref(this);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		/**
		 * Initials location client.
		 */
		bLocationClient = new LocationClient(this);		
		bLocationClient.setLocOption(getDefaultClientOption());		
		bLocationClient.registerLocationListener(new MyLocationListenner());
		
	}
	private LocationClientOption getDefaultClientOption(){
		LocationClientOption option = new LocationClientOption();		
		option.setAddrType("all");
		option.setPriority(LocationClientOption.GpsFirst);
		option.disableCache(true);
		option.setOpenGps(true);
		option.setScanSpan((int) (Setting.scanSpanSec*1000));
		option.setCoorType("bd09ll");
		return option;
	}
	
	public void requestLocation(){
		if(bLocationClient!=null)
			bLocationClient.requestLocation();
	}
	/**
	 * Exit application.
	 */
	public void start(){
		if(bLocationClient !=null&& !bLocationClient.isStarted())
			bLocationClient.start();
	}
	public void stop(){
		if(bLocationClient !=null&& bLocationClient.isStarted()) 
			bLocationClient.stop();
	}
	
	
	/**
	 * Listener for Location client.
	 */
	public class MyLocationListenner implements BDLocationListener{

		@Override
		public void onReceiveLocation(BDLocation location) {
			
			//Log.i(TAG,"Counter "+LocationApplication.counter++);			
		
			
			//Log.i(TAG,"########");
			//if(Setting.isScanSpanChanged){
			//	setScanSpan(Setting.scanSpanSec);
			//}
						
			if(location==null){
				Log.d("getLocation","try again");
				return;
			}
			/**
			 * Updates location info and refresh Main activity.
			 */
			lastLocation = location;				
			if (location.hasAddr())	lastAddress = location.getAddrStr();
			Log.i(TAG,lastLocation.getTime()+lastAddress);
			if(main!=null) main.onGetData(mInstance);		
			/**
			 * Sends warning and switches running mode.
			 */
			if(isLocationChanged()&&Setting.trackedEnable){
				// Send SMS warning to tracker
				Log.e(TAG, "SENDING SMS");
			}
			
			
		}

		@Override
		public void onReceivePoi(BDLocation arg0) {
			// TODO Auto-generated method stub
			
		}
		
	};
	
	/**
	 * Gets instance of Application
	 * @return
	 */
	public static LocationApplication getInstance(){
		return mInstance;
	}
	
	
	public boolean isStarted(){
		return bLocationClient.isStarted();
	}
	
	public BDLocation getLastLocation(){
		return this.lastLocation;
	}
	public String getLastAddress(){
		return this.lastAddress;
	}
	
	public void setScanSpan(double span){
		bLocationClient.getLocOption().setScanSpan((int) (span*1000));
		//Setting.isScanSpanChanged= false;
	}
	
	
	
	public  static final int MONITOR_MODE = 0 ;
	public static final int TRACK_MODE = 1;
	public  int runMode = 0;
	private double lastCenterLongitude=0;
	private double lastCenterLatitude=0;
	
	private void updateLastCenter(){
		lastCenterLongitude = lastLocation.getLongitude();
		lastCenterLatitude = lastLocation.getLatitude();
	}
	public double getCenterDistance(){
		return Util.GetDistance(lastLocation.getLatitude(), 
				lastLocation.getLongitude(),
				Setting.centerLatitude,
				Setting.centerLongitude);
	}
	public double getIntervalDistance(){
		return  Util.GetDistance(lastLocation.getLatitude(), 
				lastLocation.getLongitude(),
				lastCenterLatitude,
				lastCenterLongitude);
	}
	private boolean isLocationChanged(){
		if(runMode==MONITOR_MODE){			
	//	double r = lastLocation.hasRadius()? lastLocation.getRadius()/2.0:0;
			if(getCenterDistance()>Setting.distanceLimit) {
				runMode = TRACK_MODE;
				updateLastCenter();
				return true;
			}
			else return false;
			
		}else if(runMode==TRACK_MODE){			
			if(getCenterDistance()<Setting.distanceLimit)
				runMode = MONITOR_MODE;			
			if(getIntervalDistance()>Setting.trackInterval){
				updateLastCenter();
				return true;
			}
			else return false;
			
		}else return false;
	}
	
	


}
